-- Project name	: lab12
-- File		: control_unit.vhd
-- Author	: Lucy Zhang
-- Entity	: control_unit
-- Architecture	: behav
-- Description: state machine/control unit
--------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

-- declare entiy
entity control_unit is
    port (
        start : in std_logic; 
        clk : in std_logic;
        clear_sm : in std_logic;
        control_output : out std_logic_vector(3 downto 0));
end control_unit;

-- architecture
architecture behav of control_unit is

    type state_type is (IDLE, RESET, LOAD, S1, S2, S3, S4, HOLD); -- state names
    signal state, next_state : state_type; -- handles states and next states
begin
-- applies the next state to current state with 10 ns delay
    sync_process : process (clk)
    begin
        if (clk'event and clk = '1') then
            if (clear_sm = '0') then
                state <= IDLE; -- state is IDLE when clear is 0
            else
                state <= next_state after 10 ns;
            end if;
        end if;
    end process;
    -- combinatorial process, all inputs in sensitivity list
    -- next_state only - NO OUTPUTS
    next_state_process : process (state, start)
    begin
    --figures out what the next state is
        case (state) is
            when IDLE =>
                if start = '1' then
                    next_state <= RESET;
                else
                    next_state <= IDLE; -- good practice to have else here
                end if;
            when RESET =>
                    next_state <= LOAD;
            when LOAD =>
                    next_state <= S1;
            when S1 =>
                    next_state <= S2;
            when S2 =>
                    next_state <= S3;
            when S3 =>
                    next_state <= S4;
            when S4 =>
                    next_state <= HOLD;
            when HOLD =>
                    next_state <= IDLE;
            when others =>
                next_state <= IDLE;
        end case;
    end process;
    -- by assigning the output in bits rather than all 4 at once, makes 
    -- debugging easier according to Cliver
    -- control_output(4 bits) is ready/start, clear, mode(2 bits)
    -- MSB 
    -- process for the MSB (ready/start)
    ready_process : process (clk)
    begin
        if (clk'event and clk = '1') then
            case next_state is
                when IDLE => control_output(3) <= '1';
                when others =>  control_output(3) <= '0';
            end case;
        end if;
    end process;
    
    -- process for clear
    clear_process : process (clk)
    begin
        if (clk'event and clk = '1') then
            case next_state is
                when RESET => control_output(2) <= '0';
                when others =>  control_output(2) <= '1';
            end case;
        end if;
    end process;
    
    -- process for mode 
    mode_process : process (clk)
    begin
        if (clk'event and clk = '1') then
            case next_state is
                when HOLD | IDLE | RESET => control_output(1 downto 0) <= "00";
                when LOAD => control_output(1 downto 0) <= "11";
                when others =>  control_output(1 downto 0) <= "01" ;
            end case;
        end if;
    end process;
end architecture; 

 